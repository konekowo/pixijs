'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var source = "\r\n\r\nstruct GlobalFilterUniforms {\r\n  uInputSize:vec4<f32>,\r\n  uInputPixel:vec4<f32>,\r\n  uInputClamp:vec4<f32>,\r\n  uOutputFrame:vec4<f32>,\r\n  uGlobalFrame:vec4<f32>,\r\n  uOutputTexture:vec4<f32>,\r\n};\r\n\r\nstruct NoiseUniforms {\r\n  uNoise:f32,\r\n  uSeed:f32,\r\n};\r\n\r\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\r\n@group(0) @binding(2) var uSampler : sampler;\r\n\r\n@group(1) @binding(0) var<uniform> noiseUniforms : NoiseUniforms;\r\n\r\nstruct VSOutput {\r\n    @builtin(position) position: vec4<f32>,\r\n    @location(0) uv : vec2<f32>\r\n  };\r\n\r\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\r\n{\r\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\r\n\r\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\r\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\r\n\r\n    return vec4(position, 0.0, 1.0);\r\n}\r\n\r\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\r\n{\r\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\r\n}\r\n\r\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\r\n{\r\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \r\n}\r\n\r\nfn getSize() -> vec2<f32>\r\n{\r\n  return gfu.uGlobalFrame.zw;\r\n}\r\n  \r\n@vertex\r\nfn mainVertex(\r\n  @location(0) aPosition : vec2<f32>, \r\n) -> VSOutput {\r\n  return VSOutput(\r\n   filterVertexPosition(aPosition),\r\n   filterTextureCoord(aPosition)\r\n  );\r\n}\r\n\r\nfn rand(co:vec2<f32>) -> f32\r\n{\r\n  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\n\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @location(0) uv: vec2<f32>,\r\n  @builtin(position) position: vec4<f32>\r\n) -> @location(0) vec4<f32> {\r\n\r\n    var pixelPosition =  globalTextureCoord(position.xy);// / (getSize());//-  gfu.uOutputFrame.xy);\r\n  \r\n    \r\n    var sample = textureSample(uTexture, uSampler, uv);\r\n    var randomValue =  rand(pixelPosition.xy * noiseUniforms.uSeed);\r\n    var diff = (randomValue - 0.5) * noiseUniforms.uNoise;\r\n  \r\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\r\n    if (sample.a > 0.0) {\r\n      sample.r /= sample.a;\r\n      sample.g /= sample.a;\r\n      sample.b /= sample.a;\r\n    }\r\n\r\n    sample.r += diff;\r\n    sample.g += diff;\r\n    sample.b += diff;\r\n\r\n    // Premultiply alpha again.\r\n    sample.r *= sample.a;\r\n    sample.g *= sample.a;\r\n    sample.b *= sample.a;\r\n    \r\n    return sample;\r\n}";

exports.default = source;
//# sourceMappingURL=noise.wgsl.js.map
